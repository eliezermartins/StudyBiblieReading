// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudyBibleReading.Infra.Context;

#nullable disable

namespace StudyBibleReading.Infra.Migrations
{
    [DbContext(typeof(SbrContext))]
    [Migration("20241109193024_Migrate_10")]
    partial class Migrate_10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("ReadingsBooks", b =>
                {
                    b.Property<string>("PartialReadingId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BibleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PartialReadingId", "BookId", "BibleId");

                    b.HasIndex("BookId", "BibleId");

                    b.ToTable("ReadingsBooks");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.ApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BibleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SequenceInTheBible")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id", "BibleId");

                    b.HasIndex("BibleId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Bible", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Pages")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReadingQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Study")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("TranslationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TranslationId");

                    b.ToTable("Bibles");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Book", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("BibleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SequenceInTheBible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Testament")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "BibleId");

                    b.HasIndex("BibleId");

                    b.HasIndex("Name");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookId")
                        .HasColumnType("TEXT");

                    b.Property<string>("BibleId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id", "BookId", "BibleId");

                    b.HasIndex("BibleId");

                    b.HasIndex("BookId", "BibleId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Publisher", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Reading", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReadingType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Readings");

                    b.HasDiscriminator<string>("ReadingType").HasValue("Reading");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.ReadingPlan", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tradition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ReadingPlan");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.ReadingPlanDay", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReadingPlanId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id", "ReadingPlanId");

                    b.HasIndex("ReadingPlanId");

                    b.ToTable("ReadingPlanDay");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Translation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tradition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Acronym")
                        .IsUnique();

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.FullReading", b =>
                {
                    b.HasBaseType("StudyBibleReading.Domain.Models.Reading");

                    b.Property<string>("BibleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("BibleId");

                    b.HasDiscriminator().HasValue("Full");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.PartialReading", b =>
                {
                    b.HasBaseType("StudyBibleReading.Domain.Models.Reading");

                    b.HasDiscriminator().HasValue("Partial");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.PlanReading", b =>
                {
                    b.HasBaseType("StudyBibleReading.Domain.Models.Reading");

                    b.Property<string>("ReadingPlanId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("ReadingPlanId");

                    b.HasDiscriminator().HasValue("Plan");
                });

            modelBuilder.Entity("ReadingsBooks", b =>
                {
                    b.HasOne("StudyBibleReading.Domain.Models.PartialReading", null)
                        .WithMany()
                        .HasForeignKey("PartialReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyBibleReading.Domain.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId", "BibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Article", b =>
                {
                    b.HasOne("StudyBibleReading.Domain.Models.Bible", "Bible")
                        .WithMany("Articles")
                        .HasForeignKey("BibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bible");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Bible", b =>
                {
                    b.HasOne("StudyBibleReading.Domain.Models.Publisher", "Publisher")
                        .WithMany("Bibles")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudyBibleReading.Domain.Models.Translation", "Translation")
                        .WithMany("Bibles")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Translation");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Book", b =>
                {
                    b.HasOne("StudyBibleReading.Domain.Models.Bible", "Bible")
                        .WithMany("Books")
                        .HasForeignKey("BibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bible");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Chapter", b =>
                {
                    b.HasOne("StudyBibleReading.Domain.Models.Bible", "Bible")
                        .WithMany()
                        .HasForeignKey("BibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudyBibleReading.Domain.Models.Book", "Book")
                        .WithMany("Chapters")
                        .HasForeignKey("BookId", "BibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bible");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.ReadingPlanDay", b =>
                {
                    b.HasOne("StudyBibleReading.Domain.Models.ReadingPlan", "ReadingPlan")
                        .WithMany("Items")
                        .HasForeignKey("ReadingPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReadingPlan");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.FullReading", b =>
                {
                    b.HasOne("StudyBibleReading.Domain.Models.Bible", "Bible")
                        .WithMany("Readings")
                        .HasForeignKey("BibleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bible");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.PlanReading", b =>
                {
                    b.HasOne("StudyBibleReading.Domain.Models.ReadingPlan", "ReadingPlan")
                        .WithMany("Readings")
                        .HasForeignKey("ReadingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReadingPlan");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Bible", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Books");

                    b.Navigation("Readings");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Book", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Publisher", b =>
                {
                    b.Navigation("Bibles");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.ReadingPlan", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Readings");
                });

            modelBuilder.Entity("StudyBibleReading.Domain.Models.Translation", b =>
                {
                    b.Navigation("Bibles");
                });
#pragma warning restore 612, 618
        }
    }
}
